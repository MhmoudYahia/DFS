// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: dfs.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MasterTracker_UploadFile_FullMethodName          = "/dfs.MasterTracker/UploadFile"
	MasterTracker_DownloadFile_FullMethodName        = "/dfs.MasterTracker/DownloadFile"
	MasterTracker_GetFileList_FullMethodName         = "/dfs.MasterTracker/GetFileList"
	MasterTracker_Heartbeat_FullMethodName           = "/dfs.MasterTracker/Heartbeat"
	MasterTracker_RegisterDataKeeper_FullMethodName  = "/dfs.MasterTracker/RegisterDataKeeper"
	MasterTracker_FileUploaded_FullMethodName        = "/dfs.MasterTracker/FileUploaded"
	MasterTracker_GetUploadDataKeeper_FullMethodName = "/dfs.MasterTracker/GetUploadDataKeeper"
)

// MasterTrackerClient is the client API for MasterTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterTrackerClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	RegisterDataKeeper(ctx context.Context, in *RegisterDataKeeperRequest, opts ...grpc.CallOption) (*RegisterDataKeeperResponse, error)
	FileUploaded(ctx context.Context, in *FileUploadedRequest, opts ...grpc.CallOption) (*FileUploadedResponse, error)
	GetUploadDataKeeper(ctx context.Context, in *GetUploadDataKeeperRequest, opts ...grpc.CallOption) (*GetUploadDataKeeperResponse, error)
}

type masterTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterTrackerClient(cc grpc.ClientConnInterface) MasterTrackerClient {
	return &masterTrackerClient{cc}
}

func (c *masterTrackerClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, MasterTracker_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, MasterTracker_DownloadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerClient) GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileListResponse)
	err := c.cc.Invoke(ctx, MasterTracker_GetFileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, MasterTracker_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerClient) RegisterDataKeeper(ctx context.Context, in *RegisterDataKeeperRequest, opts ...grpc.CallOption) (*RegisterDataKeeperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDataKeeperResponse)
	err := c.cc.Invoke(ctx, MasterTracker_RegisterDataKeeper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerClient) FileUploaded(ctx context.Context, in *FileUploadedRequest, opts ...grpc.CallOption) (*FileUploadedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileUploadedResponse)
	err := c.cc.Invoke(ctx, MasterTracker_FileUploaded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterTrackerClient) GetUploadDataKeeper(ctx context.Context, in *GetUploadDataKeeperRequest, opts ...grpc.CallOption) (*GetUploadDataKeeperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadDataKeeperResponse)
	err := c.cc.Invoke(ctx, MasterTracker_GetUploadDataKeeper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterTrackerServer is the server API for MasterTracker service.
// All implementations must embed UnimplementedMasterTrackerServer
// for forward compatibility.
type MasterTrackerServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	RegisterDataKeeper(context.Context, *RegisterDataKeeperRequest) (*RegisterDataKeeperResponse, error)
	FileUploaded(context.Context, *FileUploadedRequest) (*FileUploadedResponse, error)
	GetUploadDataKeeper(context.Context, *GetUploadDataKeeperRequest) (*GetUploadDataKeeperResponse, error)
	mustEmbedUnimplementedMasterTrackerServer()
}

// UnimplementedMasterTrackerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterTrackerServer struct{}

func (UnimplementedMasterTrackerServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMasterTrackerServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedMasterTrackerServer) GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedMasterTrackerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMasterTrackerServer) RegisterDataKeeper(context.Context, *RegisterDataKeeperRequest) (*RegisterDataKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataKeeper not implemented")
}
func (UnimplementedMasterTrackerServer) FileUploaded(context.Context, *FileUploadedRequest) (*FileUploadedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploaded not implemented")
}
func (UnimplementedMasterTrackerServer) GetUploadDataKeeper(context.Context, *GetUploadDataKeeperRequest) (*GetUploadDataKeeperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadDataKeeper not implemented")
}
func (UnimplementedMasterTrackerServer) mustEmbedUnimplementedMasterTrackerServer() {}
func (UnimplementedMasterTrackerServer) testEmbeddedByValue()                       {}

// UnsafeMasterTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterTrackerServer will
// result in compilation errors.
type UnsafeMasterTrackerServer interface {
	mustEmbedUnimplementedMasterTrackerServer()
}

func RegisterMasterTrackerServer(s grpc.ServiceRegistrar, srv MasterTrackerServer) {
	// If the following call pancis, it indicates UnimplementedMasterTrackerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MasterTracker_ServiceDesc, srv)
}

func _MasterTracker_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTracker_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTracker_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTracker_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTracker_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTracker_GetFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServer).GetFileList(ctx, req.(*GetFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTracker_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTracker_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTracker_RegisterDataKeeper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDataKeeperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServer).RegisterDataKeeper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTracker_RegisterDataKeeper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServer).RegisterDataKeeper(ctx, req.(*RegisterDataKeeperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTracker_FileUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServer).FileUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTracker_FileUploaded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServer).FileUploaded(ctx, req.(*FileUploadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterTracker_GetUploadDataKeeper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadDataKeeperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterTrackerServer).GetUploadDataKeeper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterTracker_GetUploadDataKeeper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterTrackerServer).GetUploadDataKeeper(ctx, req.(*GetUploadDataKeeperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterTracker_ServiceDesc is the grpc.ServiceDesc for MasterTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.MasterTracker",
	HandlerType: (*MasterTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _MasterTracker_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _MasterTracker_DownloadFile_Handler,
		},
		{
			MethodName: "GetFileList",
			Handler:    _MasterTracker_GetFileList_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _MasterTracker_Heartbeat_Handler,
		},
		{
			MethodName: "RegisterDataKeeper",
			Handler:    _MasterTracker_RegisterDataKeeper_Handler,
		},
		{
			MethodName: "FileUploaded",
			Handler:    _MasterTracker_FileUploaded_Handler,
		},
		{
			MethodName: "GetUploadDataKeeper",
			Handler:    _MasterTracker_GetUploadDataKeeper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfs.proto",
}

const (
	DataKeeper_FileTransfer_FullMethodName = "/dfs.DataKeeper/FileTransfer"
)

// DataKeeperClient is the client API for DataKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataKeeperClient interface {
	FileTransfer(ctx context.Context, in *FileTransferRequest, opts ...grpc.CallOption) (*FileTransferResponse, error)
}

type dataKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewDataKeeperClient(cc grpc.ClientConnInterface) DataKeeperClient {
	return &dataKeeperClient{cc}
}

func (c *dataKeeperClient) FileTransfer(ctx context.Context, in *FileTransferRequest, opts ...grpc.CallOption) (*FileTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileTransferResponse)
	err := c.cc.Invoke(ctx, DataKeeper_FileTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataKeeperServer is the server API for DataKeeper service.
// All implementations must embed UnimplementedDataKeeperServer
// for forward compatibility.
type DataKeeperServer interface {
	FileTransfer(context.Context, *FileTransferRequest) (*FileTransferResponse, error)
	mustEmbedUnimplementedDataKeeperServer()
}

// UnimplementedDataKeeperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataKeeperServer struct{}

func (UnimplementedDataKeeperServer) FileTransfer(context.Context, *FileTransferRequest) (*FileTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileTransfer not implemented")
}
func (UnimplementedDataKeeperServer) mustEmbedUnimplementedDataKeeperServer() {}
func (UnimplementedDataKeeperServer) testEmbeddedByValue()                    {}

// UnsafeDataKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataKeeperServer will
// result in compilation errors.
type UnsafeDataKeeperServer interface {
	mustEmbedUnimplementedDataKeeperServer()
}

func RegisterDataKeeperServer(s grpc.ServiceRegistrar, srv DataKeeperServer) {
	// If the following call pancis, it indicates UnimplementedDataKeeperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataKeeper_ServiceDesc, srv)
}

func _DataKeeper_FileTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataKeeperServer).FileTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataKeeper_FileTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataKeeperServer).FileTransfer(ctx, req.(*FileTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataKeeper_ServiceDesc is the grpc.ServiceDesc for DataKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.DataKeeper",
	HandlerType: (*DataKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileTransfer",
			Handler:    _DataKeeper_FileTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfs.proto",
}
